#include <configurations/vm.h>

import <std_connector.camkes>;
import <global-connectors.camkes>;
import <seL4VMDTBPassthrough.idl4>;
import <FileServerInterface.camkes>;
import <FileServer/FileServer.camkes>;
import <SerialServer/SerialServer.camkes>;
import <TimeServer/TimeServer.camkes>;
import <vm-connectors.camkes>;
import <devices.camkes>;

import "components/Pacer/Pacer.camkes";
import "components/emitter_t_impl/emitter_t_impl.camkes";
//import "components/consumer_t_impl/consumer_t_impl.camkes";

component VM {
  VM_INIT_DEF()
  include <sb_types.h>;
  include <sb_queue_int8_t_1.h>;
  dataport sb_queue_int8_t_1_t crossvm_dp_0;
  emits SendEvent ready;
  maybe consumes SendEvent done;

  dataport sb_queue_int8_t_1_t period;
}

assembly {
  composition {
    component emitter_t_impl src_thread;
    //component consumer_t_impl dst_thread;
    component Pacer pacer;

    VM_GENERAL_COMPOSITION_DEF()
    //component VM vmSender;
    //VM_COMPONENT_CONNECTIONS_DEF(Sender)
    //VM_VIRTUAL_SERIAL_COMPOSITION_DEF(Sender)

    component VM vmReceiver;
    VM_COMPONENT_CONNECTIONS_DEF(Receiver)
    VM_VIRTUAL_SERIAL_COMPOSITION_DEF(Receiver)

    //connection seL4Notification conn1(from src_thread.sb_write_port_1_notification, to dst_thread.sb_read_port_notification);
    //connection seL4SharedData conn2(from src_thread.sb_write_port_queue_1, to dst_thread.sb_read_port_queue);
    connection seL4Notification conn3(from pacer.tick, to pacer.tock);

    connection seL4Notification conn5(from pacer.period, to src_thread.sb_pacer_notification);
    //connection seL4Notification conn5(from pacer.period, to dst_thread.sb_pacer_notification);

	// For VM as Sender
    //connection seL4SharedDataWithCaps conn4(from pacer.period_to_vm, to vmSender.period);
    //connection seL4Notification event_conn_1(from vmSender.ready, to dst_thread.sb_read_port_notification);
    //connection seL4SharedDataWithCaps cross_vm_conn_1(from vmSender.crossvm_dp_0,  to dst_thread.sb_read_port_queue);
    //connection seL4VMDTBPassthrough vm_dtb1(from vmSender.dtb_self, to vmSender.dtb);

	// For VM as Receiver
    connection seL4SharedDataWithCaps conn4(from pacer.period_to_vm, to vmReceiver.period);
    connection seL4GlobalAsynch event_conn_1(from src_thread.sb_write_port_1_notification, to vmReceiver.done);
    connection seL4SharedDataWithCaps cross_vm_conn_1(from src_thread.sb_write_port_queue_1, to vmReceiver.crossvm_dp_0);
    connection seL4VMDTBPassthrough vm_dtb1(from vmReceiver.dtb_self, to vmReceiver.dtb);
  }

  configuration {
    src_thread.sb_write_port_queue_1_access = "W";
    //dst_thread.sb_read_port_queue_access = "R";
    pacer.period_to_vm_access = "W";
    dst_thread._priority = 50;

    pacer._domain = 1;
    pacer.tock_domain = 1;
    src_thread._domain = 2;
    src_thread.sb_pacer_notification_domain = 2;
    vmSender._domain = 2;
    dst_thread._domain = 3;
    dst_thread.sb_read_port_notification_domain = 3;
    dst_thread.sb_pacer_notification_domain = 3;
    vmReceiver._domain = 3;
    vmReceiver.done_domain = 3;

    vmSender.crossvm_dp_0 = "W";
    vmSender.period = "R";
    vmReceiver.crossvm_dp_0 = "R";
    vmReceiver.period = "R";
    VM_GENERAL_CONFIGURATION_DEF()
    VM_CONFIGURATION_DEF(Receiver)
    VM_CONFIGURATION_DEF(Sender)
    VM_VIRTUAL_SERIAL_CONFIGURATION_DEF(Receiver,Sender)

    vmReceiver.cnode_size_bits = 18;
    vmReceiver.simple_untyped21_pool = 12;
    vmReceiver.simple_untyped12_pool = 12;
    vmReceiver.num_extra_frame_caps = 0;
    vmReceiver.extra_frame_map_address = 0;

    vmSender.cnode_size_bits = 18;
    vmSender.simple_untyped21_pool = 12;
    vmSender.simple_untyped12_pool = 12;
    vmSender.num_extra_frame_caps = 0;
    vmSender.extra_frame_map_address = 0;
  }
}
